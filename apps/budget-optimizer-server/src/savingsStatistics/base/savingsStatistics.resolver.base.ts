/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SavingsStatistics } from "./SavingsStatistics";
import { SavingsStatisticsCountArgs } from "./SavingsStatisticsCountArgs";
import { SavingsStatisticsFindManyArgs } from "./SavingsStatisticsFindManyArgs";
import { SavingsStatisticsFindUniqueArgs } from "./SavingsStatisticsFindUniqueArgs";
import { CreateSavingsStatisticsArgs } from "./CreateSavingsStatisticsArgs";
import { UpdateSavingsStatisticsArgs } from "./UpdateSavingsStatisticsArgs";
import { DeleteSavingsStatisticsArgs } from "./DeleteSavingsStatisticsArgs";
import { User } from "../../user/base/User";
import { SavingsStatisticsService } from "../savingsStatistics.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SavingsStatistics)
export class SavingsStatisticsResolverBase {
  constructor(
    protected readonly service: SavingsStatisticsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SavingsStatistics",
    action: "read",
    possession: "any",
  })
  async _savingsStatisticsItemsMeta(
    @graphql.Args() args: SavingsStatisticsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SavingsStatistics])
  @nestAccessControl.UseRoles({
    resource: "SavingsStatistics",
    action: "read",
    possession: "any",
  })
  async savingsStatisticsItems(
    @graphql.Args() args: SavingsStatisticsFindManyArgs
  ): Promise<SavingsStatistics[]> {
    return this.service.savingsStatisticsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SavingsStatistics, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SavingsStatistics",
    action: "read",
    possession: "own",
  })
  async savingsStatistics(
    @graphql.Args() args: SavingsStatisticsFindUniqueArgs
  ): Promise<SavingsStatistics | null> {
    const result = await this.service.savingsStatistics(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SavingsStatistics)
  @nestAccessControl.UseRoles({
    resource: "SavingsStatistics",
    action: "create",
    possession: "any",
  })
  async createSavingsStatistics(
    @graphql.Args() args: CreateSavingsStatisticsArgs
  ): Promise<SavingsStatistics> {
    return await this.service.createSavingsStatistics({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SavingsStatistics)
  @nestAccessControl.UseRoles({
    resource: "SavingsStatistics",
    action: "update",
    possession: "any",
  })
  async updateSavingsStatistics(
    @graphql.Args() args: UpdateSavingsStatisticsArgs
  ): Promise<SavingsStatistics | null> {
    try {
      return await this.service.updateSavingsStatistics({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SavingsStatistics)
  @nestAccessControl.UseRoles({
    resource: "SavingsStatistics",
    action: "delete",
    possession: "any",
  })
  async deleteSavingsStatistics(
    @graphql.Args() args: DeleteSavingsStatisticsArgs
  ): Promise<SavingsStatistics | null> {
    try {
      return await this.service.deleteSavingsStatistics(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(
    @graphql.Parent() parent: SavingsStatistics
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
