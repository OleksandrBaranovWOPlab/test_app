/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { OptimizationSuggestion } from "./OptimizationSuggestion";
import { OptimizationSuggestionCountArgs } from "./OptimizationSuggestionCountArgs";
import { OptimizationSuggestionFindManyArgs } from "./OptimizationSuggestionFindManyArgs";
import { OptimizationSuggestionFindUniqueArgs } from "./OptimizationSuggestionFindUniqueArgs";
import { CreateOptimizationSuggestionArgs } from "./CreateOptimizationSuggestionArgs";
import { UpdateOptimizationSuggestionArgs } from "./UpdateOptimizationSuggestionArgs";
import { DeleteOptimizationSuggestionArgs } from "./DeleteOptimizationSuggestionArgs";
import { OptimizationSuggestionService } from "../optimizationSuggestion.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => OptimizationSuggestion)
export class OptimizationSuggestionResolverBase {
  constructor(
    protected readonly service: OptimizationSuggestionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "OptimizationSuggestion",
    action: "read",
    possession: "any",
  })
  async _optimizationSuggestionsMeta(
    @graphql.Args() args: OptimizationSuggestionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [OptimizationSuggestion])
  @nestAccessControl.UseRoles({
    resource: "OptimizationSuggestion",
    action: "read",
    possession: "any",
  })
  async optimizationSuggestions(
    @graphql.Args() args: OptimizationSuggestionFindManyArgs
  ): Promise<OptimizationSuggestion[]> {
    return this.service.optimizationSuggestions(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => OptimizationSuggestion, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "OptimizationSuggestion",
    action: "read",
    possession: "own",
  })
  async optimizationSuggestion(
    @graphql.Args() args: OptimizationSuggestionFindUniqueArgs
  ): Promise<OptimizationSuggestion | null> {
    const result = await this.service.optimizationSuggestion(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OptimizationSuggestion)
  @nestAccessControl.UseRoles({
    resource: "OptimizationSuggestion",
    action: "create",
    possession: "any",
  })
  async createOptimizationSuggestion(
    @graphql.Args() args: CreateOptimizationSuggestionArgs
  ): Promise<OptimizationSuggestion> {
    return await this.service.createOptimizationSuggestion({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OptimizationSuggestion)
  @nestAccessControl.UseRoles({
    resource: "OptimizationSuggestion",
    action: "update",
    possession: "any",
  })
  async updateOptimizationSuggestion(
    @graphql.Args() args: UpdateOptimizationSuggestionArgs
  ): Promise<OptimizationSuggestion | null> {
    try {
      return await this.service.updateOptimizationSuggestion({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OptimizationSuggestion)
  @nestAccessControl.UseRoles({
    resource: "OptimizationSuggestion",
    action: "delete",
    possession: "any",
  })
  async deleteOptimizationSuggestion(
    @graphql.Args() args: DeleteOptimizationSuggestionArgs
  ): Promise<OptimizationSuggestion | null> {
    try {
      return await this.service.deleteOptimizationSuggestion(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
