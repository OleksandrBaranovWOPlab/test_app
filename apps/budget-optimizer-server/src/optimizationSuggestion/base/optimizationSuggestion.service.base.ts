/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  OptimizationSuggestion as PrismaOptimizationSuggestion,
} from "@prisma/client";

export class OptimizationSuggestionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.OptimizationSuggestionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.optimizationSuggestion.count(args);
  }

  async optimizationSuggestions(
    args: Prisma.OptimizationSuggestionFindManyArgs
  ): Promise<PrismaOptimizationSuggestion[]> {
    return this.prisma.optimizationSuggestion.findMany(args);
  }
  async optimizationSuggestion(
    args: Prisma.OptimizationSuggestionFindUniqueArgs
  ): Promise<PrismaOptimizationSuggestion | null> {
    return this.prisma.optimizationSuggestion.findUnique(args);
  }
  async createOptimizationSuggestion(
    args: Prisma.OptimizationSuggestionCreateArgs
  ): Promise<PrismaOptimizationSuggestion> {
    return this.prisma.optimizationSuggestion.create(args);
  }
  async updateOptimizationSuggestion(
    args: Prisma.OptimizationSuggestionUpdateArgs
  ): Promise<PrismaOptimizationSuggestion> {
    return this.prisma.optimizationSuggestion.update(args);
  }
  async deleteOptimizationSuggestion(
    args: Prisma.OptimizationSuggestionDeleteArgs
  ): Promise<PrismaOptimizationSuggestion> {
    return this.prisma.optimizationSuggestion.delete(args);
  }
}
